# write documentation in plain text format
import sys
import os
import os.path
import re
import datetime, time

def writeDoc(model, config):
    with open(os.path.join(config['outdir'], config['text']), 'w') as f:
        printHeader(f, model, config)
        printModelDescription(f, model, config)
        printDiffs(f, model, config)
        printAlgs(f, model, config)
        printIntermeds(f, model, config)
        printParameters(f, model, config)
        
def printHeader(file, model, config):
    print >> file, 'Model information for %s' % config['name']
    print >> file, 'Generated by BCMD bparser.doc_text'
    print >> file, datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S')
    print >> file, ''

def printModelDescription(file, model, config):
    desc = '\n'.join([x for x in model['modeldocs'] if not (x.startswith('+') or x.startswith('@') or x.startswith('$') or x.startswith('~'))])
    print >> file, desc
    print >> file, ''
    print >> file, '%d state variables (%d differential, %d algebraic)' % (len(model['roots']), len(model['diffs']), len(model['algs']))
    print >> file, '%d intermediate variables (%d unused)' % (len(model['intermeds']), len([x for x in model['intermeds'] if x in model['unused']]))
    print >> file, '%d parameters (%d unused)' % (len(model['params']), len([x for x in model['params'] if x in model['unused']]))
    print >> file, ''
    print >> file, '%d declared inputs, %d default outputs' % (len(model['inputs']), len(model['outputs']))
    print >> file, '%d tags' % len(model['tags'])
    
    print >> file, '\n'

def printDiffs(file, model, config):
    print >> file, '*** DIFFERENTIAL VARIABLES ***\n'        
    for name in sorted(model['diffs'], key=lambda s: s.lower()):
        printVar(name, file, model, config, ['Differential'])

def printAlgs(file, model, config):
    print >> file, '*** ALGEBRAIC VARIABLES ***\n'        
    for name in sorted(model['algs'], key=lambda s: s.lower()):
        printVar(name, file, model, config, ['Algebraic'])

def printIntermeds(file, model, config):
    print >> file, '*** INTERMEDIATE VARIABLES ***\n'        
    for name in sorted(model['intermeds'], key=lambda s: s.lower()):
        printVar(name, file, model, config, ['Intermediate'])

def printParameters(file, model, config):
    print >> file, '*** PARAMETERS ***\n'        
    for name in sorted(model['params'], key=lambda s: s.lower()):
        printVar(name, file, model, config, ['Parameter'])

def printVar(name, file, model, config, classes):
    if name in model['chemicals']: classes.append('Species')
    if name in model['inputs']: classes.append('Input')
    if name in model['outputs']: classes.append('Output')
    if name in model['unused']: classes.append('Unused')
    if name in model['extern']: classes.append('External')
    
    print >> file, '* %s (%s)' % (name, ', '.join(classes))
        
    sym = model['symbols'][name]

    if 'units' in sym:
        print >> file, '  Units: %s' % sym['units']
    
    if sym['diffs']:
        lhs = "%s'" % name
        deps= set()
        for aux in model['auxiliaries'][name]:
            mass = aux[0]
            if mass < 0:
                mass = -mass
                op = '-'
            else:
                op = '+'
            
            if mass == 1:
                mstr = ''
            else:
                mstr = '%s * ' % str(mass)
            
            lhs = "%s %s %s %s'" % (lhs, op, mstr, aux[1])
            deps |= set([aux[1]])
        expr = '%s = %s' % (lhs, sym['diffs'][0]['expr'])
        deps |= sym['diffs'][0]['depends']
    elif sym['algs']:
        expr = '%s = 0' % sym['algs'][0]['expr']
        deps = sym['algs'][0]['depends']
    else:
        exprs = [x for x in sym['assigns'] if not x['init']]
        if exprs:
            expr = exprs[0]['expr']
            deps = exprs[0]['depends']
        else:
            expr = ''
            deps = []

    if expr:
        print >> file, '  Expression: %s' % expr
        print >> file, '  Dependencies: %s' % ', '.join(sorted(deps, key=lambda s: s.lower()))
    
    init = [x for x in sym['assigns'] if x['init']]
    
    if init:
        print >> file, '  Initialiser: %s' % init[0]['expr']
        if init[0]['depends']:
            print >> file, '  Initialiser Dependencies: %s' % ', '.join(sorted(init[0]['depends'], key=lambda s: s.lower()))
    else:
        print >> file, '  Initialiser: Not specified, defaults to 0'
        
    if sym['tags']:
        print >> file, '  Tags: %s' % ', '.join(sorted(sym['tags'], key=lambda s: s.lower()))
    
    docs = [x for x in sym['docs'] if not (x.startswith('+') or x.startswith('@') or x.startswith('$') or x.startswith('~'))]
    if docs:
        print >> file, '\n  %s' % '\n  '.join(docs)
    
    print >> file, '\n'
